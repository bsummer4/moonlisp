# Moonlisp
This is a simple lisp implementation that uses tables and strings instead of
lists and symbols as it's core data structures. It compiles Lua and Javascript.
Python, and Javascript.

## Semantics
Types: t ::= nil, bool, func, str, num, foreign, and table.
All functions are of the form t→t.
Tables are mutable and map from t→t.
All values are immutable besides tables and foreigns.

## Basic Syntax
Syntax for atomic data structures:: #nil #true #false str <str> 4.5
Quoting:: 'atom "string" “string”
Syntactic forms:: (foo bar a=b)
Table literals:: {foo bar a=b}
Function calls:: [foo bar zaz a=b] (this passes {bar zaz a=b} to foo)
Keys in ‘key=val’ forms must be atomic data structures.

Basic lisp forms:
	(λ arg exp ...)
	(do exp ...)
	(quote exp)
	(match exp (pattern exp ...) ...)

Syntactic Sugar
	a.b → [. a b] → a[b]
	'a → (quote a)
	(def a b) more ... → (match b (a more ...))
	(defs (a b) (c d)) more ... → (match {b d} ({a c} more ...))
	(let ((a b) (c d)) body ...) → (match {b d} ({a c} body ...))

## Supported Operations
.      :: [table t] → t         -- Table lookup
!      :: [table t t] → nil     -- Table mutation
apply  :: func → table → t      -- Method binding
keys   :: [table] → table       -- Table keys
#      :: [table] → num         -- Array length
append :: [table table] → table -- Array concatenation
read   :: string → t            -- Read data expression.
write  :: t → string            -- Write data expression.
+      :: [num num] → num
-      :: [num num] → num
*      :: [num num] → num
/      :: [num num] → num
%      :: [num num] → num
^      :: [num num] → num
==     :: [t t] → bool          -- Equality
~=     :: [num num] → bool
<=     :: [num num] → bool
>=     :: [num num] → bool
<      :: [num num] → bool
>      :: [num num] → bool
..     :: [str str] → str       -- Concatenation.
lua    :: [str t ...] → func    -- Foreign function interface
js     :: [str t ...] → func    -- Foreign function interface

## Foreign Function Interface
(lua "print(%1+%2)" 1 2) -> 3
(js "console.log(%1)" "hi")

## Examples
### Pattern-matching examples:
(match {1 2 k=c} ({a b k=c} [write a b c]))
(match {1 2 k=3} (e [write e]))
(define (hello a b k=c) [write a b c])
(hello 1 2 k=3)
