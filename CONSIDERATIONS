# Considerations
## Implementing Pattern Matching on Tables.
Let's just support variable-free table literals first.
	For example: {1 2 b=3}
	Process?
		Check if the table has the correct size.
			How do we do that using only Moonlisp built-ins?
				(= 3 [# [keys t]])
		For each key in the pattern, check if the value in the table matches.
			(and (= 1 (. t 1)) (= 2 (. t 2)) (= 3 t.b))
	TODO Since having a nil value is allowed in lua, we need to disallow it
		from table-matching patterns.
			TODO Also, we should probably disallow them in function
				calls and possibly in syntax as well. This
					needs to be thought through carefully.

Alright, cool. Now, how do we bind variables in table-patterns?
	Let's look just at flat tables first.
		Whatever process we come up with, we should be able to just do it
			recursively for nested ones.
	He's an example table {1 b 3}
	We can divide the table into two parts, parts to match, and parts to
		assign to variables.
	Then we have four steps:
		First, check all the literal values.
		Second, check to make that values exist for all variable-patterns.
		Third, bind all of these table values to local variables.
		Fourth, Generate the associated code.

Alright, now for nested table patterns.
	If we just do each of the first three steps above recursively, we'll
	have all of our checks and binds done correctly.

## Complications
### Javascript objects have only string keys.
This is also true for arrays.
	Arrays are just objects with keys ['0', '1', '2', ..].

This doesn't match out model.

We can build (or use) something like jshashtable.
	For this to be effective, we need a decent hashing function for all
	Moonlisp objects. This is annoying, but probably doable.

We can implement naively implement arrays on top of our hash table
implementation. This will be slow, but this is just a proof of concept anyways.

## Thoughts on transforming into the new, flat LIR:
(f (LET (var e) stmt))
	BIND v1; BIND v2; ASSIGN v2 e; ASSIGN v1 stmt; f(v1)

(f (IF x a b)) ->
	BIND v1; IF v0 {ASSIGN v1 a}{ASSIGN v1 b}; f(v1)
