Lua code generation is ugly and probably not completely correct.
	It would be nicer if integers were output without the trailing '.0'.
	Invalid variables names are possible.
	String output isn't quoted correctly.
	The temp variable name can be used for real variables.
	Excessive use of lambda.
	Using tmp variables everywhere is ugly, although
		fixing this would probably be too complicated to be worth it.
	If statements generate incorrect code.
		They return from both branches (return from the function they are in).
		Both branches generate their own tmp variables.
	There are probably lots more issues.

The REPL chokes on parens in string literals.
Merge SET and ASSIGN in the IR.
Separate ‘IR.hs’ from the IR→Lua transformation.
	Compilation code should go in ‘IRLua.hs’ ‘IRPython.hs’ and ‘IRJS.hs’.

Install node.js
Write a ‘JS.hs’ mirroring ‘Lua.hs’
Get a working Javascript REPL using s-expression syntax.
Write a ‘Python.hs’ mirroring ‘Lua.hs’
Get a working Python REPL using s-expression syntax.
Rework the IR:
	It should support all the features common to all back-ends with
		minimal added niceness.

Add s-expression support to the IR
Write compilers from the IR to Python, Lua, and JS.
Add features to IR.hs
	Pattern matching
	String-based and function-based FFIs.
	Macros
