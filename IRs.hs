module IRs where

-- Atomic Data Types
data Atom = T | F | NIL | STR String | NUM Double deriving (Eq,Show,Read,Ord)

-- S-expression Representation
data Sexp = SPRIM Atom | STBL [(Sexp,Sexp)] deriving (Eq,Show,Read,Ord)

-- Code Generation
data CExp = CExp DelimTy CExp1 deriving (Show,Read)
data DelimTy = Unsafe | Space | Safe deriving (Show,Read)
data CExp1
	= CATOM String
	| CSTMT String CExp
	| CBLOCK (String,String) [CExp]
	| CTUPLE (String,String) [CExp]
	| CBINOP CExp String CExp
	deriving (Show,Read)

-- Internal Representation
-- TODO HACK Only ‘return’ statements generated by ‘retimplicit’ are safe.
--  Since we can't support arbitrary ‘return’ statments, this should not
--  be allowed in this ADT.
data IExp
	= IPrim Atom
	| IVAR String
	| ICALL IExp [IExp]
	| IΛ [String] IExp
	| IDO [IExp]
	| ITBL [(Atom,IExp)]
	| IASSIGN String IExp
	| IGET IExp IExp
	| ISET IExp IExp IExp
	| IIF IExp IExp IExp
	| IRETURN IExp
	deriving (Read,Show)

-- Lua Representation
data LVar = LTMP | LVar String | LTVar LExp LExp deriving (Show,Read)
data LExp
	= LPrim Atom
	| LCALLEXP (LExp,[LExp])
	| LVAR LVar
	| LΛ [String] [LStmt]
	| LDOT LExp LExp
	| LTABLE [(LExp,LExp)]
	deriving (Show,Read)

data LStmt
	= LDO [LStmt]
	| LASSIGN LVar LExp
	| LLOCAL LVar
	| LIF LExp [LStmt] [LStmt]
	| LCALLSTMT (LExp,[LExp])
	| LRETURN LExp
	| LBREAK
	| LCONTINUE
	deriving (Show,Read)
